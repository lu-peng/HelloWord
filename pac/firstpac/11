--包含模块
	。 urllib.resquest: 打开和读取urls
	。 urllib.error:包含urllib.resquest 产生的常见错误，使用try捕获
	。 urllib.parse 包含解析url的方法
	。 urllib.robotparse robots.txt 文件
二网页编码
	。通过chatdet 自动检测网页编码，但是可能有误，返回字典类型通过get获取encdoing
	。需要安装 conda install chardet
三url的返回对象
	。geturl 返回请求的url地址
	。info 返回请求对象的meta信息
	。getcode 返回请求结果
四resquest.data的使用
	。访问网络的两种方法
		。get方法
			-利用参数传递参数
			-参数为dict，然后用parse编码
		。post方法
			-一般是往服务器传东西
			-post是把信息自动加密处理
			-我们如果想使用post信息，需要用到data参数
			-使用post可能意味着我们的请求头需要修改
				-Content-Type：application/x-www.form-urlencode
				-Content-Length:数据长度
			-利用urllib.parse.urlencode()就能将字符串处理为上所需
			-为了设置更多的请求信息，urlopen已经不够用，所以需要用到request.Request()
五urllib.error
	-urlerror产生的原因
		-没网
		-服务器连接失败
		-不知道指定的服务器
		-是OSerror的子类
	-httperror是urlerror的一个子类
	-HTTPError是对应的HTTP的返回错误码，如果返回码是400以上的则返回HTTPError
	-URLError一般是网络问题，包括url错误
	-关系  OSError -- URLError  --HTTPError
六UserAgent
	-设置UserAgent
		-heads
		-add_header
七ProxyHandler处理（代理服务器）
	-使用代理IP是常用的手段
	-获取代理服务器地址
		-www.xicidaili.com
		-www.doubanjia.com
	-代理用来隐藏真实访问中，代理也不能频繁访问一个网站，所以代理一定要很多很多
	-基本使用步骤
		1、设置代理地址
		2、创建ProxyHandler
		3、创建Opener
		4、安装Opener
八cookie和session
	-由于http协议无记忆性，为了弥补所有采用的补充协议
	-cookie是发放给用户的即（http浏览器）的一段信息，session是保存在服务器上的另一半信息用来记录用户信息
	-cookie和session 的区别
		-位置的区别
		-cookie不安全
		-session保存在服务器上有过期时间
		-单个cookie不超过4k，很多浏览器限制最多保存20个cookie
	-session的存放位置
		-session存放在服务器端
		-一般情况下是存放在内存或者数据库中
		-没有cookie登陆的时候是未登陆状态
	-使用cookie登陆
		-直接将cookie复制下来，手动赋值登陆
		-http模块包含一些含有cookie的模块，通过他们可以自动使用cookie
			-CookieJar
				管理储存cookie向传出的Http请求添加cookie
				cookie存储在内存中，cookiejar实例回收后cookie将消失
			-FileCookieJar（filename,delayload=None,policy=None）
				使用文件管理cookie
				filename是保存cookie 的文件
			-MozillaCookieJar（filename,delayload=None,policy=None）
				-创建与mozilla浏览器cookie.txt兼容的filecookiejar实例
			-LwpCookieJar
				-创建与libwww-perl标准兼容的Set-Cookie3格式的FileCookieJar实例
			-他们的关系CookieJar-->FileCookieJar -->MozillaCookieJar&LwpCookieJar
		-利用CookieJar访问人人网
			-大致流程
				-打开登陆页通过用户密码自动登陆
				-自动提取反馈回来的cookie
				-利用获取的cookie登陆
		-handler是handler的实例常用的产看案例代码
				#生成cookie管理器
				cookie_handler = request.HTTPCookieProcessor(cookie)
				#生成http管理器
				http_handler = request.HTTPHandler()
				#生成Https管理器
				https_handler = request.HTTPSHandler()
			创建handler后使用opener打开相应的业务就由相应的handler处理
		-cookie作为一个变量打印出来
				cookie的属性值
					-name :名称
					-value：值
					-domain：可以访问此cookie的域名
					-path：可以访问此cookie 的路径
					-exprise：访问超时时间
					-size：大小
					-Http字段
		-cookie的保存 使用FileCookieJar